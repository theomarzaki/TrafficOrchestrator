// this script is a class for the manuever recommendation to parse data to JSON format
//  for the v2X gatway to recieve

// Created by: KCL

// Modified by: Omar Nassef (KCL)
#ifndef TO_MANEUVER_RECOMMENDATION_H
#define TO_MANEUVER_RECOMMENDATION_H

#include "waypoint.h"
#include <vector>
#include <memory>

typedef uint32_t uint4;

class ManeuverRecommendation {

private:

    std::string type;
    std::string context;
    std::string origin;
    std::string version = "1.2.0";
    uint64_t timestamp;
    std::string uuid_vehicle; // Digital Identifier of RU that shall execute the maneuver.
    std::string uuid_to; // Digital Identifier of the traffic orchestrator.
    std::string uuid_maneuver; // Digital Identifier of the maneuver recommendation, generated by traffic orchestrator.
    std::vector<std::shared_ptr<Waypoint>> waypoints; // A list of waypoints indicating a target position, speed, and lane for the vehicle.

    /* The vehicle should start adapting towards the target lane and speed at the indicated timestamp and position. */
    uint64_t timestamp_action;
    uint32_t latitude_action;
    uint32_t longitude_action;
    uint16_t speed_action;
    uint4 lane_position;
    std::string source_uuid;
    std::string uuid;
    std::string message_id;
    std::string signature;

public:

    ManeuverRecommendation(uint64_t timestamp,
                           std::string uuid_vehicle,
                           std::string uuid_to,
                           std::string uuid_maneuver,
                           std::vector<std::shared_ptr<Waypoint>> waypoints,
                           uint64_t timestamp_action,
                           uint32_t latitude_action,
                           uint32_t longitude_action,
                           uint16_t speed_action,
                           uint4 lane_position,
                           std::string signature) :
            timestamp(timestamp),
            uuid_vehicle(std::move(uuid_vehicle)),
            uuid_to(std::move(uuid_to)),
            uuid_maneuver(uuid_maneuver),
            waypoints(std::move(waypoints)),
            timestamp_action(timestamp_action),
            latitude_action(latitude_action),
            longitude_action(longitude_action),
            speed_action(speed_action),
            lane_position(lane_position),
            signature(std::move(signature)) {
        type = "maneuver";
        context = "lane_merge";
        origin = "traffic_orchestrator";
        source_uuid = "traffic_orchestrator";
        uuid_maneuver = std::to_string(10000000 + (std::rand() % (99999999 - 10000000 + 1)));

    }

    ManeuverRecommendation() {
        type = "maneuver";
        context = "lane_merge";
        origin = "traffic_orchestrator";
        source_uuid = "traffic_orchestrator";
        uuid_maneuver = std::to_string(10000000 + (std::rand() % (99999999 - 10000000 + 1)));
    }


    friend std::ostream &operator<<(std::ostream &os, ManeuverRecommendation *maneuverRec); // Overload << to print a recommendation.

    std::string getType();
    std::string getContext();
    std::string getOrigin();
    std::string getVersion();
    uint64_t getTimestamp();
    std::string getUuidVehicle();
    std::string getUuidTo();
    std::string getUuidManeuver();
    std::vector<std::shared_ptr<Waypoint>> getWaypoints();
    uint64_t getTimestampAction();
    uint32_t getLatitudeAction();
    uint32_t getLongitudeAction();
    uint16_t getSpeedAction();
    uint4 getLanePositionAction();
    std::string getSignature();
    std::string getSourceUUID();
    std::string getUUID();
    std::string getMessageID();

    void setType(std::string);
    void setContext(std::string);
    void setOrigin(std::string);
    void setVersion(std::string);
    void setTimestamp(uint64_t);
    void setUuidVehicle(std::string);
    void setUuidTo(std::string);
    void setUuidManeuver(std::string);
    void setWaypoints(std::vector<std::shared_ptr<Waypoint>> waypoints);
    void setTimestampAction(uint64_t);
    void setLatitudeAction(uint32_t);
    void setLongitudeAction(uint32_t);
    void setSpeedAction(uint16_t);
    void setLanePositionAction(uint4);
    void setSignature(std::string);
    void setSourceUUID(std::string);
    void setUUID(std::string);
    void setMessageID(std::string);
    void addWaypoint(const std::shared_ptr<Waypoint> &waypoint);
    void emptyWaypoints();
};

#endif
