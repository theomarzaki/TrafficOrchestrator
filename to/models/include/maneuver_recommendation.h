// this script is a class for the manuever recommendation to parse data to JSON format
//  for the v2X gatway to recieve

// Created by: KCL

// Modified by: Omar Nassef (KCL)
#ifndef TO_MANEUVER_RECOMMENDATION_H
#define TO_MANEUVER_RECOMMENDATION_H

#include "waypoint.h"
#include <vector>
#include <memory>

typedef uint32_t uint4;

class ManeuverRecommendation {

private:

    string type;
    string context;
    string origin;
    string version = "1.2.0";
    uint64_t timestamp;
    string uuid_vehicle; // Digital Identifier of RU that shall execute the maneuver.
    string uuid_to; // Digital Identifier of the traffic orchestrator.
    string uuid_maneuver; // Digital Identifier of the maneuver recommendation, generated by traffic orchestrator.
    vector<std::shared_ptr<Waypoint>> waypoints; // A list of waypoints indicating a target position, speed, and lane for the vehicle.

    /* The vehicle should start adapting towards the target lane and speed at the indicated timestamp and position. */
    uint64_t timestamp_action;
    uint32_t latitude_action;
    uint32_t longitude_action;
    uint16_t speed_action;
    uint4 lane_position;
    string source_uuid;
    string uuid;
    string message_id;
    string signature;

public:

    ManeuverRecommendation(tuple<uint8_t, uint8_t, uint8_t> version,
                           uint64_t timestamp,
                           string uuid_vehicle,
                           string uuid_to,
                           string uuid_maneuver,
                           vector<std::shared_ptr<Waypoint>> waypoints,
                           uint64_t timestamp_action,
                           uint32_t latitude_action,
                           uint32_t longitude_action,
                           uint16_t speed_action,
                           uint4 lane_position,
                           string signature) :
            timestamp(timestamp),
            uuid_vehicle(std::move(uuid_vehicle)),
            uuid_to(std::move(uuid_to)),
            uuid_maneuver(uuid_maneuver),
            waypoints(std::move(waypoints)),
            timestamp_action(timestamp_action),
            latitude_action(latitude_action),
            longitude_action(longitude_action),
            speed_action(speed_action),
            lane_position(lane_position),
            signature(std::move(signature)) {
        type = "maneuver";
        context = "lane_merge";
        origin = "traffic_orchestrator";
        source_uuid = "traffic_orchestrator";
        uuid_maneuver = to_string(10000000 + (std::rand() % (99999999 - 10000000 + 1)));

    }

    ManeuverRecommendation() {
        type = "maneuver";
        context = "lane_merge";
        origin = "traffic_orchestrator";
        source_uuid = "traffic_orchestrator";
        uuid_maneuver = to_string(10000000 + (std::rand() % (99999999 - 10000000 + 1)));
    }


    friend std::ostream &operator<<(ostream &os, ManeuverRecommendation *maneuverRec); // Overload << to print a recommendation.

    string getType();

    string getContext();

    string getOrigin();

    string getVersion();

    uint64_t getTimestamp();

    string getUuidVehicle();

    string getUuidTo();

    string getUuidManeuver();

    vector<std::shared_ptr<Waypoint>> getWaypoints();

    uint64_t getTimestampAction();

    uint32_t getLatitudeAction();

    uint32_t getLongitudeAction();

    uint16_t getSpeedAction();

    uint4 getLanePositionAction();

    string getSignature();

    string getSourceUUID();

    string getUUID();

    string getMessageID();

    void setType(string);
    void setContext(string);
    void setOrigin(string);
    void setVersion(string);
    void setTimestamp(uint64_t);
    void setUuidVehicle(string);
    void setUuidTo(string);
    void setUuidManeuver(string);
    void setWaypoints(vector<std::shared_ptr<Waypoint>> waypoints);
    void setTimestampAction(uint64_t);
    void setLatitudeAction(uint32_t);
    void setLongitudeAction(uint32_t);
    void setSpeedAction(uint16_t);
    void setLanePositionAction(uint4);
    void setSignature(string);
    void setSourceUUID(string);
    void setUUID(string);
    void setMessageID(string);
    void addWaypoint(const std::shared_ptr<Waypoint> &waypoint);
    void emptyWaypoints();
};

#endif
