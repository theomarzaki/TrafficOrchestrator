// this script is a class for the manuever recommendation to parse data to JSON format
//  for the v2X gatway to recieve

// Created by: KCL

// Modified by: Omar Nassef (KCL)

#include <iostream>
#include <ostream>
#include <string>
#include <vector>
#include <tuple>
#include "waypoint.cpp"

using std::string;
using std::vector;
using std::ostream;
using std::tuple;

typedef uint32_t uint4;

class ManeuverRecommendation {

private:

    string type;
    string context;
    string origin;
    string version = "1.2.0";
    uint64_t timestamp;
    string uuid_vehicle; // Digital Identifier of RU that shall execute the maneuver.
    string uuid_to; // Digital Identifier of the traffic orchestrator.
    string uuid_maneuver; // Digital Identifier of the maneuver recommendation, generated by traffic orchestrator.
    vector<std::shared_ptr<Waypoint>> waypoints; // A list of waypoints indicating a target position, speed, and lane for the vehicle.

    /* The vehicle should start adapting towards the target lane and speed at the indicated timestamp and position. */
    uint64_t timestamp_action;
    uint32_t latitude_action;
    uint32_t longitude_action;
    uint16_t speed_action;
    uint4 lane_position;
    string source_uuid;
    string uuid;
    string message_id;
    string signature;

public:

    ManeuverRecommendation(tuple<uint8_t, uint8_t, uint8_t> version,
                           uint64_t timestamp,
                           string uuid_vehicle,
                           string uuid_to,
                           string uuid_maneuver,
                           vector<std::shared_ptr<Waypoint>> waypoints,
                           uint64_t timestamp_action,
                           uint32_t latitude_action,
                           uint32_t longitude_action,
                           uint16_t speed_action,
                           uint4 lane_position,
                           string signature) :
            type(type),
            context(context),
            origin(origin),
            timestamp(timestamp),
            uuid_vehicle(uuid_vehicle),
            uuid_to(uuid_to),
            uuid_maneuver(uuid_maneuver),
            waypoints(waypoints),
            timestamp_action(timestamp_action),
            latitude_action(latitude_action),
            longitude_action(longitude_action),
            speed_action(speed_action),
            lane_position(lane_position),
            signature(signature) {
        type = "maneuver";
        context = "lane_merge";
        origin = "traffic_orchestrator";
        source_uuid = "traffic_orchestrator";
        uuid_maneuver = to_string(10000000 + (std::rand() % (99999999 - 10000000 + 1)));

    }

    ManeuverRecommendation() {
        type = "maneuver";
        context = "lane_merge";
        origin = "traffic_orchestrator";
        source_uuid = "traffic_orchestrator";
        uuid_maneuver = to_string(10000000 + (std::rand() % (99999999 - 10000000 + 1)));
    }


    friend std::ostream &operator<<(ostream &os, ManeuverRecommendation *maneuverRec); // Overload << to print a recommendation.

    string getType();

    string getContext();

    string getOrigin();

    string getVersion();

    uint64_t getTimestamp();

    string getUuidVehicle();

    string getUuidTo();

    string getUuidManeuver();

    auto getWaypoints();

    uint64_t getTimestampAction();

    uint32_t getLatitudeAction();

    uint32_t getLongitudeAction();

    uint16_t getSpeedAction();

    uint4 getLanePositionAction();

    string getSignature();

    string getSourceUUID();

    string getUUID();

    string getMessageID();

    void setType(string);

    void setContext(string);

    void setOrigin(string);

    void setVersion(string);

    void setTimestamp(uint64_t);

    void setUuidVehicle(string);

    void setUuidTo(string);

    void setUuidManeuver(string);

    void setWaypoints(vector<std::shared_ptr<Waypoint>> waypoints);

    void setTimestampAction(uint64_t);

    void setLatitudeAction(uint32_t);

    void setLongitudeAction(uint32_t);

    void setSpeedAction(uint16_t);

    void setLanePositionAction(uint4);

    void setSignature(string);

    void setSourceUUID(string);

    void setUUID(string);

    void setMessageID(string);

    void addWaypoint(const std::shared_ptr<Waypoint> &waypoint);

    void emptyWaypoints();
};

string ManeuverRecommendation::getType() { return type; }

string ManeuverRecommendation::getContext() { return context; }

string ManeuverRecommendation::getOrigin() { return origin; }

string ManeuverRecommendation::getVersion() { return version; }

uint64_t ManeuverRecommendation::getTimestamp() { return timestamp; }

string ManeuverRecommendation::getUuidVehicle() { return uuid_vehicle; }

string ManeuverRecommendation::getUuidTo() { return uuid_to; }

string ManeuverRecommendation::getUuidManeuver() { return uuid_maneuver; }

auto ManeuverRecommendation::getWaypoints() { return waypoints; }

uint64_t ManeuverRecommendation::getTimestampAction() { return timestamp_action; }

uint32_t ManeuverRecommendation::getLatitudeAction() { return latitude_action; }

uint32_t ManeuverRecommendation::getLongitudeAction() { return longitude_action; }

uint16_t ManeuverRecommendation::getSpeedAction() { return speed_action; }

uint4 ManeuverRecommendation::getLanePositionAction() { return lane_position; }

string ManeuverRecommendation::getSignature() { return signature; }

string ManeuverRecommendation::getUUID() { return uuid; }

string ManeuverRecommendation::getSourceUUID() { return source_uuid; }

string ManeuverRecommendation::getMessageID() { return message_id; }

void ManeuverRecommendation::setType(string parameter) { type = parameter; }

void ManeuverRecommendation::setContext(string parameter) { context = parameter; }

void ManeuverRecommendation::setOrigin(string parameter) { origin = parameter; }

void ManeuverRecommendation::setVersion(string parameter) { version = parameter; }

void ManeuverRecommendation::setTimestamp(uint64_t parameter) { timestamp = parameter; }

void ManeuverRecommendation::setUuidVehicle(string parameter) { uuid_vehicle = parameter; }

void ManeuverRecommendation::setUuidTo(string parameter) { uuid_to = parameter; }

void ManeuverRecommendation::setUuidManeuver(string parameter) { uuid_maneuver = parameter; }

void ManeuverRecommendation::setWaypoints(vector<std::shared_ptr<Waypoint>> waypointVector) { waypoints = std::move(waypointVector); }

void ManeuverRecommendation::setTimestampAction(uint64_t parameter) { timestamp_action = parameter; }

void ManeuverRecommendation::setLatitudeAction(uint32_t parameter) { latitude_action = parameter; }

void ManeuverRecommendation::setLongitudeAction(uint32_t parameter) { longitude_action = parameter; }

void ManeuverRecommendation::setSpeedAction(uint16_t parameter) { speed_action = parameter; }

void ManeuverRecommendation::setLanePositionAction(uint4 parameter) { lane_position = parameter; }

void ManeuverRecommendation::setSignature(string parameter) { signature = parameter; }

void ManeuverRecommendation::setUUID(string parameter) { uuid = parameter; }

void ManeuverRecommendation::setSourceUUID(string parameter) { source_uuid = parameter; }

void ManeuverRecommendation::setMessageID(string parameter) { message_id = parameter; }

void ManeuverRecommendation::addWaypoint(const std::shared_ptr<Waypoint> &waypoint) { waypoints.push_back(waypoint); }

void ManeuverRecommendation::emptyWaypoints() { waypoints.clear(); }

std::ostream &operator<<(std::ostream &os, ManeuverRecommendation *maneuverRec) {

    os
            << "["
            << maneuverRec->getType()
            << ","
            << maneuverRec->getContext()
            << ","
            << maneuverRec->getOrigin()
            << ","
            << maneuverRec->getVersion()
            << ","
            << maneuverRec->getTimestamp()
            << ","
            << maneuverRec->getUuidVehicle()
            << ","
            << maneuverRec->getUuidTo()
            << ","
            << maneuverRec->getMessageID()
            << ","
            << maneuverRec->getUuidManeuver()
            << ","
            << maneuverRec->getTimestampAction()
            << ","
            << maneuverRec->getLatitudeAction()
            << ","
            << maneuverRec->getLongitudeAction()
            << ","
            << maneuverRec->getSpeedAction()
            << ","
            << maneuverRec->getLanePositionAction()
            << "]\n";
    for (const auto &w : maneuverRec->getWaypoints()) {
        os << w;
    }

    return os;

}
